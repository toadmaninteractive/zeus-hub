### Erlang Server Configuration

#
# RUN_AS_USER
#
# Run server as a specific user
#

RUN_AS_USER=$USER


#
# RELEASE
#
# The Erlang release name.
#

RELEASE=server

#
# APP_CONFIG
#
# Path to app.config
#

APP_CONFIG=etc/app.config


#
# VM_ARGS
#
# Path to vm.args
#

VM_ARGS=etc/vm.args


#
# LOG_DIR
#
# Path to log dir
#

LOG_DIR=log


#
# ETOP_ARGS
#
# Default etop args.
#

ETOP_ARGS="-lines 15"


##
## Log Settings
##

#
# RUN_ERL_LOG_ALIVE_MINUTES
#
# How long to wait for output (in minutes) before writing an "ALIVE" message to
# the log. Default is 15, can never be less than 1.
#

export RUN_ERL_LOG_ALIVE_MINUTES=15


#
# RUN_ERL_LOG_ACTIVITY_MINUTES
#
# How long erlang need to be inactive before output will be preceded with a
# timestamp. Default is RUN_ERL_LOG_ALIVE_MINUTES div 3, but never less than 1.
#

export RUN_ERL_LOG_ACTIVITY_MINUTES=5


#
# RUN_ERL_LOG_ALIVE_FORMAT
#
# Specifies another format string to be used in the strftime C library call. 
# i.e specifying this to "%e-%b-%Y, %T %Z" will give log messages with 
# timestamps looking like 15-May-2003, 10:23:04 MET etc. See the documentation
# for the C library function strftime for more information. Default is 
# "%a %b %e %T %Z %Y".
#

export RUN_ERL_LOG_ALIVE_FORMAT="%a %b %e %T %Z %Y"


#
# RUN_ERL_LOG_ALIVE_IN_UTC
#
# If set to anything else than "0", it will make all times displayed by run_erl
# to be in UTC (GMT,CET,MET, without DST), rather than in local time. This does
# not affect data coming from erlang, only the logs output directly by run_erl.
# The application sasl can be modified accordingly by setting the erlang
# application variable utc_log to true.
#

export RUN_ERL_LOG_ALIVE_IN_UTC=0


#
# RUN_ERL_LOG_GENERATIONS
#
# Controls the number of log files written before older files are being reused.
# Default is 5, minimum is 2, maximum is 1000.
#

export RUN_ERL_LOG_GENERATIONS=5


#
# RUN_ERL_LOG_MAXSIZE
#
# The size (in bytes) of a log file before switching to a new log file. Default
# is 100000, minimum is 1000 and maximum is approximately 2^30.
#

#export RUN_ERL_LOG_MAXSIZE=100000
export RUN_ERL_LOG_MAXSIZE=100000000


#
# RUN_ERL_DISABLE_FLOWCNTRL
#
# If defined, disables input and output flow control for the pty opend by 
# run_erl. Useful if you want to remove any risk of accidentally blocking the
# flow control by hit Ctrl-S (instead of Ctrl-D to detach). Which may result in
# blocking of the entire beam process and in the case of running heart as
# supervisor even the heart process will be blocked when writing log message to
# terminal. Leaving the heart process unable to do its work. 
#

#export RUN_ERL_DISABLE_FLOWCNTRL=1
